{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/comments.ts","api/posts.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","hooks/useToggle.ts","App.tsx","index.tsx"],"names":["PostsList","posts","onSelect","selectedPostId","className","length","map","title","userId","id","type","onClick","BASE_URL","request","url","body","fetch","then","response","json","getPostComments","postId","deleteComment","commentId","method","createComment","JSON","stringify","post","getPostDetails","NewCommentForm","memo","onCreate","useState","name","setName","email","setEmail","setBody","handleSubmit","useCallback","event","preventDefault","newCommnet","handleChange","target","eventName","value","onSubmit","placeholder","onChange","required","PostDetails","details","setDetails","comments","setComments","initialState","state","setState","toggle","currentState","useToggle","isCommentsVisible","toggleCommentsVisible","onCreateComment","newComment","Date","useEffect","fetchDetails","a","data","fetchComments","Promise","all","catch","console","warn","removeComment","filter","App","selectedUserId","setSelectedUserId","setSelectedPostId","setPosts","query","getUserPosts","handleUserSelect","handlePostSelect","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.65242f09.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../../types/Post';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[],\n  onSelect: CallableFunction,\n  selectedPostId: number,\n};\n\nexport const PostsList: React.FC<Props> = ({ posts, onSelect, selectedPostId }) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      {posts.length ? (\n        <ul className=\"PostsList__list\">\n          {posts.map(({ title, userId, id }) => (\n            <li key={id} className=\"PostsList__item\">\n              <div>\n                <b>{`[User #${userId}]: `}</b>\n                {title}\n              </div>\n\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={onSelect(selectedPostId !== id ? id : 0)}\n              >\n                {\n                  selectedPostId !== id\n                    ? 'Open'\n                    : 'Close'\n                }\n              </button>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>Not found</p>\n      )}\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string, body = {}) => fetch(`${BASE_URL}${url}`, body)\n  .then(response => response.json());\n\nexport const remove = (url: string) => request(url, { method: 'DELETE' });\n\nexport const post = <T>(url: string, body: T) => request(url, {\n  method: 'POST',\n  body: JSON.stringify(body),\n});\n","import { CreateComment } from '../types/comment';\nimport { post, remove, request } from './api';\n\nexport const getPostComments = (postId: number) => {\n  return request(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return remove(`/comments/${commentId}`);\n};\n\nexport const createComment = (body: CreateComment) => {\n  post('/comments/', body);\n};\n","import { request } from './api';\n\nexport const getUserPosts = (userId: number) => {\n  const query = userId !== 0\n    ? `/posts?userId=${userId}`\n    : '/posts';\n\n  return request(query);\n};\n\nexport const getPostDetails = (postId: number) => {\n  return request(`/posts/${postId}`);\n};\n","import React, {\n  ChangeEvent, FormEvent, memo, useCallback, useState,\n} from 'react';\nimport { createComment } from '../../api/comments';\nimport { CreateComment } from '../../types/comment';\nimport './NewCommentForm.scss';\n\ntype Change = ChangeEvent<HTMLInputElement | HTMLTextAreaElement>;\n\ntype Props = {\n  postId: number;\n  onCreate: (newComment: CreateComment) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = memo(({ postId, onCreate }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleSubmit = useCallback((event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (name && email && body) {\n      const newCommnet: CreateComment = {\n        name,\n        email,\n        body,\n        postId,\n      };\n\n      createComment(newCommnet);\n\n      onCreate(newCommnet);\n\n      setName('');\n      setEmail('');\n      setBody('');\n    }\n  }, [name, email, body, postId]);\n\n  const handleChange = useCallback((event: Change) => {\n    const { name: eventName, value } = event.target;\n\n    switch (eventName) {\n      case 'name':\n        setName(value);\n        break;\n      case 'email':\n        setEmail(value);\n        break;\n      case 'body':\n        setBody(value);\n        break;\n\n      default:\n        break;\n    }\n  }, []);\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={handleChange}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={handleChange}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={handleChange}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n});\n","/* eslint-disable no-console */\nimport {\n  FC, memo, useCallback, useEffect, useState,\n} from 'react';\nimport { deleteComment, getPostComments } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { useToggle } from '../../hooks/useToggle';\nimport { Comment, CreateComment } from '../../types/comment';\nimport { IPostDetails } from '../../types/PostDetails';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  postId: number;\n};\n\nexport const PostDetails: FC<Props> = memo(({ postId }) => {\n  const [details, setDetails] = useState<IPostDetails | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isCommentsVisible, toggleCommentsVisible] = useToggle(true);\n\n  const onCreateComment = useCallback((body: CreateComment) => {\n    const newComment: Comment = {\n      ...body,\n      id: +new Date(),\n    };\n\n    setComments((state) => [...state, newComment]);\n  }, []);\n\n  useEffect(() => {\n    setDetails(null);\n    setComments([]);\n\n    const fetchDetails = async (id: number) => {\n      const data: IPostDetails = await getPostDetails(id);\n\n      setDetails(data);\n\n      return data;\n    };\n\n    const fetchComments = async (id: number) => {\n      const data: Comment[] = await getPostComments(id);\n\n      setComments(data);\n\n      return data;\n    };\n\n    Promise.all([fetchDetails(postId), fetchComments(postId)]).catch(console.warn);\n  }, [postId]);\n\n  const removeComment = useCallback((commentId: number) => () => {\n    deleteComment(commentId);\n    setComments((state) => state.filter(({ id }) => id !== commentId));\n  }, [postId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {details !== null\n        ? (\n          <>\n            <section className=\"PostDetails__post\">\n              <p>{details.body}</p>\n            </section>\n\n            <section className=\"PostDetails__comments\">\n              {!!comments.length && (\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  onClick={toggleCommentsVisible}\n                >\n                  {`${isCommentsVisible ? 'Hide' : 'Show'} ${comments.length} comments`}\n                </button>\n              )}\n\n              <ul className=\"PostDetails__list\">\n                {isCommentsVisible && comments.map(({ body, id }) => (\n                  <li key={id} className=\"PostDetails__list-item\">\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={removeComment(id)}\n                    >\n                      X\n                    </button>\n                    <p>{body}</p>\n                  </li>\n                ))}\n              </ul>\n            </section>\n\n            <section>\n              <div className=\"PostDetails__form-wrapper\">\n                <NewCommentForm postId={postId} onCreate={onCreateComment} />\n              </div>\n            </section>\n          </>\n        ) : (\n          <p>Loading...</p>\n        )}\n    </div>\n  );\n});\n","import { useCallback, useState } from 'react';\n\ntype ReturnType = [boolean, () => void];\n\nexport const useToggle = (initialState = false): ReturnType => {\n  const [state, setState] = useState(initialState);\n  const toggle = useCallback(() => setState(currentState => !currentState), [state]);\n\n  return [state, toggle];\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\n\nimport React, {\n  ChangeEvent, useCallback, useEffect, useState,\n} from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts } from './api/posts';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    getUserPosts(selectedUserId)\n      .then(setPosts);\n  }, [selectedUserId]);\n\n  const handleUserSelect = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserId(+event.target.value);\n  }, [selectedUserId]);\n\n  const handlePostSelect = useCallback((postId) => () => {\n    setSelectedPostId(postId);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={handleUserSelect}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            onSelect={handlePostSelect}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {!!selectedPostId && <PostDetails postId={selectedPostId} />}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}